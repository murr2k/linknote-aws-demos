AWSTemplateFormatVersion: '2010-09-09'
Description: 'BC Ferries Enterprise Monitoring - Simplified AWS Managed Grafana (No TimeStream)'

Parameters:
  WorkspaceName:
    Type: String
    Default: bc-ferries-enterprise
    Description: Name for the Grafana workspace
    
  CustomDomain:
    Type: String
    Default: ops.linknote.com
    Description: Custom domain for the Grafana workspace

Resources:
  # IAM Role for Grafana Service
  GrafanaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'BC-Ferries-Grafana-Service-Role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: grafana.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonGrafanaServiceRole
      Policies:
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricData
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:FilterLogEvents
                  - logs:GetLogEvents
                Resource: '*'

  # AWS Managed Grafana Workspace (Simplified - No TimeStream)
  BCFerriesGrafanaWorkspace:
    Type: AWS::Grafana::Workspace
    Properties:
      Name: !Ref WorkspaceName
      Description: 'BC Ferries Fleet Enterprise Monitoring Dashboard - Demo Version'
      AccountAccessType: CURRENT_ACCOUNT
      AuthenticationProviders:
        - AWS_SSO
      DataSources:
        - CLOUDWATCH
        - PROMETHEUS
      NotificationDestinations:
        - SNS
      OrganizationRoleName: !Sub 'BC-Ferries-Grafana-Org-Role-${AWS::StackName}'
      PermissionType: SERVICE_MANAGED
      RoleArn: !GetAtt GrafanaServiceRole.Arn

  # CloudWatch Log Group for Maritime Events (Alternative to TimeStream)
  BCFerriesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/bc-ferries/maritime-telemetry-${AWS::StackName}'
      RetentionInDays: 30

  # SNS Topic for Alerts
  BCFerriesAlertsNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'bc-ferries-alerts-${AWS::StackName}'
      DisplayName: BC Ferries Maritime Alerts
      
  # IoT Core Policy for Ferry Devices
  BCFerriesIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub 'BCFerriesFleetPolicy-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/bc-ferries-*'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/fleet/bcferries/*'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/fleet/bcferries/*'

  # IoT Rule to route telemetry to CloudWatch Logs (Alternative to TimeStream)
  BCFerriesTelemetryRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub 'BCFerriesTelemetryToLogs${AWS::StackName}'
      TopicRulePayload:
        Sql: "SELECT *, topic() as topic, timestamp() as aws_timestamp FROM 'fleet/bcferries/+/telemetry'"
        Actions:
          - CloudwatchLogs:
              LogGroupName: !Ref BCFerriesLogGroup
              RoleArn: !GetAtt IoTLogsRole.Arn
              
  # IoT Rule for Emergency Alerts
  BCFerriesEmergencyRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub 'BCFerriesEmergencyAlerts${AWS::StackName}'
      TopicRulePayload:
        Sql: "SELECT * FROM 'fleet/bcferries/+/emergency/+' WHERE emergency = true"
        Actions:
          - Sns:
              TargetArn: !Ref BCFerriesAlertsNS
              RoleArn: !GetAtt IoTSNSRole.Arn
              MessageFormat: JSON

  # IAM Role for CloudWatch Logs writes
  IoTLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'BC-Ferries-IoT-Logs-Role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt BCFerriesLogGroup.Arn

  # IAM Role for SNS alerts
  IoTSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'BC-Ferries-IoT-SNS-Role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref BCFerriesAlertsNS

Outputs:
  GrafanaWorkspaceId:
    Description: 'AWS Managed Grafana Workspace ID'
    Value: !Ref BCFerriesGrafanaWorkspace
    Export:
      Name: !Sub 'BC-Ferries-Grafana-Workspace-ID-${AWS::StackName}'
      
  GrafanaWorkspaceEndpoint:
    Description: 'Grafana Workspace Endpoint for ops.linknote.com'
    Value: !GetAtt BCFerriesGrafanaWorkspace.Endpoint
    Export:
      Name: !Sub 'BC-Ferries-Grafana-Endpoint-${AWS::StackName}'
      
  CloudWatchLogGroup:
    Description: 'CloudWatch Log Group for maritime telemetry (TimeStream alternative)'
    Value: !Ref BCFerriesLogGroup
    Export:
      Name: !Sub 'BC-Ferries-CloudWatch-Logs-${AWS::StackName}'
      
  SNSAlertsopic:
    Description: 'SNS Topic for maritime alerts'
    Value: !Ref BCFerriesAlertsNS
    Export:
      Name: !Sub 'BC-Ferries-SNS-Alerts-${AWS::StackName}'